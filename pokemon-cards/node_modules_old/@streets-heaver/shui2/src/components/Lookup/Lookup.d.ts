import type { FC, Key, ReactElement, ReactNode } from 'react';
export type LookupProps<T extends {
    id: Key;
}> = {
    searchBy?: {
        enabled?: boolean;
        options?: SearchByOption[];
        selectedOption?: SearchByOption;
        setSelectedOption?: (option: SearchByOption) => void;
    };
    singleSelect?: boolean;
    selected: T | T[] | null;
    setSelected: (value: T | T[] | ((prev: T[]) => T[]) | null) => void;
    ItemRender: FC<LookupItemRenderProps<T>>;
    GhostItemRender: FC;
    onSearchTermChange?: (inputText: string, option: SearchByOption) => void;
    searchQueryData: {
        data: T[];
        hasNextPage: boolean;
        isFetchingNextPage: boolean;
        fetchNextPage: () => void;
        status: 'pending' | 'success' | 'error' | 'idle';
        error?: {
            message?: string;
        };
        errorMessage?: ReactNode;
        emptyDataMessage?: ReactNode;
    };
    placeholder?: string;
    dropdownMaxHeight?: string | number;
    disabled?: boolean;
    automationId?: string;
    searchable?: boolean;
};
export type LookupItemRenderProps<T> = {
    data: T;
    disabled?: boolean;
};
type SearchByOption = {
    label: ReactNode;
    value: string;
};
export declare const Lookup: <T extends {
    id: Key;
}>(props: LookupProps<T>) => ReactElement;
export {};
